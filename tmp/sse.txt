aaaaaaaa
	__attribute__((target("avx"),stdcall))
	void test(std::vector<uint8_t> & v1, std::vector<uint8_t> & v2)
	{
		double cmp = 0.0;
		// ...
		__m64 a1 = _mm_set_pi16(v1[i], v1[i + 1], v1[i + 2], v1[i + 3]);
		__m64 a2 = _mm_set_pi16(v2[i], v2[i + 1], v2[i + 2], v2[i + 3]);
		__m64 a3 = _mm_cmpeq_pi8(a1, a2);
		// после вызова _mm_cmpeq_pi8, cmp == nan
		uint32_t x = static_cast<uint32_t>(_mm_movemask_pi8(a3));
		cmp += ((x == 0xffffffffU) ? 0.1 : 0.0);

	}

bbbbbbbb





#include <stdio.h>




template<int SHIFT>
bool boolRegVal(uint16_t val) {
   return val & (1 << SHIFT);
}

int main(int argc, char *argv[])
{
	
	uint32_t x = 0x0fffffff; // 0, 4, 8, 12, 16, 20, 24, 28 == 0
	/*
	printf("val: %u\n", boolRegVal<1>(x));
		printf("val: %u\n", boolRegVal<2>(x));
			printf("val: %u\n", boolRegVal<3>(x));
				printf("val: %u\n", boolRegVal<4>(x));
					printf("val: %u\n", boolRegVal<5>(x));
						printf("val: %u\n", boolRegVal<6>(x));
							printf("val: %u\n", boolRegVal<7>(x));
								printf("val: %u\n", boolRegVal<8>(x));
								*/
								
								for (uint32_t i =0; i < 33; i++)
									printf("val x: %u (%d)\n", ((x >> i) & 0x0f) ? true : false, i);
	
}

